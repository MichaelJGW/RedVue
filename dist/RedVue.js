!function(e,t){for(var r in t)e[r]=t[r]}(exports,function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=5)}([function(e,t,r){"use strict";r.r(t),r.d(t,"__DO_NOT_USE__ActionTypes",(function(){return i})),r.d(t,"applyMiddleware",(function(){return v})),r.d(t,"bindActionCreators",(function(){return l})),r.d(t,"combineReducers",(function(){return f})),r.d(t,"compose",(function(){return y})),r.d(t,"createStore",(function(){return u}));var n=r(2),o=function(){return Math.random().toString(36).substring(7).split("").join(".")},i={INIT:"@@redux/INIT"+o(),REPLACE:"@@redux/REPLACE"+o(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+o()}};function a(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function u(e,t,r){var o;if("function"==typeof t&&"function"==typeof r||"function"==typeof r&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof t&&void 0===r&&(r=t,t=void 0),void 0!==r){if("function"!=typeof r)throw new Error("Expected the enhancer to be a function.");return r(u)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var c=e,f=t,s=[],l=s,p=!1;function d(){l===s&&(l=s.slice())}function h(){if(p)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return f}function y(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(p)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");var t=!0;return d(),l.push(e),function(){if(t){if(p)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");t=!1,d();var r=l.indexOf(e);l.splice(r,1)}}}function v(e){if(!a(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(p)throw new Error("Reducers may not dispatch actions.");try{p=!0,f=c(f,e)}finally{p=!1}for(var t=s=l,r=0;r<t.length;r++){(0,t[r])()}return e}return v({type:i.INIT}),(o={dispatch:v,subscribe:y,getState:h,replaceReducer:function(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");c=e,v({type:i.REPLACE})}})[n.a]=function(){var e,t=y;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function r(){e.next&&e.next(h())}return r(),{unsubscribe:t(r)}}})[n.a]=function(){return this},e},o}function c(e,t){var r=t&&t.type;return"Given "+(r&&'action "'+String(r)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function f(e){for(var t=Object.keys(e),r={},n=0;n<t.length;n++){var o=t[n];0,"function"==typeof e[o]&&(r[o]=e[o])}var a,u=Object.keys(r);try{!function(e){Object.keys(e).forEach((function(t){var r=e[t];if(void 0===r(void 0,{type:i.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===r(void 0,{type:i.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+i.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(r)}catch(e){a=e}return function(e,t){if(void 0===e&&(e={}),a)throw a;for(var n=!1,o={},i=0;i<u.length;i++){var f=u[i],s=r[f],l=e[f],p=s(l,t);if(void 0===p){var d=c(f,t);throw new Error(d)}o[f]=p,n=n||p!==l}return n?o:e}}function s(e,t){return function(){return t(e.apply(this,arguments))}}function l(e,t){if("function"==typeof e)return s(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var r={};for(var n in e){var o=e[n];"function"==typeof o&&(r[n]=s(o,t))}return r}function p(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function d(e,t){var r=Object.keys(e);return Object.getOwnPropertySymbols&&r.push.apply(r,Object.getOwnPropertySymbols(e)),t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r}function h(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?d(r,!0).forEach((function(t){p(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):d(r).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function y(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function v(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return function(e){return function(){var r=e.apply(void 0,arguments),n=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:r.getState,dispatch:function(){return n.apply(void 0,arguments)}},i=t.map((function(e){return e(o)}));return h({},r,{dispatch:n=y.apply(void 0,i)(r.dispatch)})}}}},function(e,t,r){"use strict";(function(e){var r,n="undefined"!=typeof Symbol?Symbol("immer-nothing"):((r={})["immer-nothing"]=!0,r),o="undefined"!=typeof Symbol?Symbol.for("immer-draftable"):"__$immer_draftable",i="undefined"!=typeof Symbol?Symbol.for("immer-state"):"__$immer_state";function a(e){return!!e&&!!e[i]}function u(e){if(!e||"object"!=typeof e)return!1;if(Array.isArray(e))return!0;var t=Object.getPrototypeOf(e);return!t||t===Object.prototype||(!!e[o]||!!e.constructor[o])}var c=Object.assign||function(e,t){for(var r in t)d(t,r)&&(e[r]=t[r]);return e},f="undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames;function s(e,t){if(void 0===t&&(t=!1),Array.isArray(e))return e.slice();var r=Object.create(Object.getPrototypeOf(e));return f(e).forEach((function(n){if(n!==i){var o=Object.getOwnPropertyDescriptor(e,n),a=o.value;if(o.get){if(!t)throw new Error("Immer drafts cannot have computed properties");a=o.get.call(e)}o.enumerable?r[n]=a:Object.defineProperty(r,n,{value:a,writable:!0,configurable:!0})}})),r}function l(e,t){if(Array.isArray(e))for(var r=0;r<e.length;r++)t(r,e[r],e);else f(e).forEach((function(r){return t(r,e[r],e)}))}function p(e,t){return Object.getOwnPropertyDescriptor(e,t).enumerable}function d(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function h(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}var y=function(e){this.drafts=[],this.parent=e,this.canAutoFreeze=!0,this.patches=null};function v(e){e[i].revoke()}y.prototype.usePatches=function(e){e&&(this.patches=[],this.inversePatches=[],this.patchListener=e)},y.prototype.revoke=function(){this.leave(),this.drafts.forEach(v),this.drafts=null},y.prototype.leave=function(){this===y.current&&(y.current=this.parent)},y.current=null,y.enter=function(){return this.current=new y(this.current)};var b={};function g(e,t){var r=Array.isArray(e),n=E(e);l(n,(function(t){!function(e,t,r){var n=b[t];n?n.enumerable=r:b[t]=n={configurable:!0,enumerable:r,get:function(){return function(e,t){S(e);var r=O(w(e),t);if(e.finalizing)return r;if(r===O(e.base,t)&&u(r))return P(e),e.copy[t]=g(r,e);return r}(this[i],t)},set:function(e){!function(e,t,r){if(S(e),e.assigned[t]=!0,!e.modified){if(h(r,O(w(e),t)))return;j(e),P(e)}e.copy[t]=r}(this[i],t,e)}};Object.defineProperty(e,t,n)}(n,t,r||p(e,t))}));var o,a,c,f=t?t.scope:y.current;return o=n,a=i,c={scope:f,modified:!1,finalizing:!1,finalized:!1,assigned:{},parent:t,base:e,draft:n,copy:null,revoke:m,revoked:!1},Object.defineProperty(o,a,{value:c,enumerable:!1,writable:!0}),f.drafts.push(n),n}function m(){this.revoked=!0}function w(e){return e.copy||e.base}function O(e,t){var r=e[i];if(r&&!r.finalizing){r.finalizing=!0;var n=e[t];return r.finalizing=!1,n}return e[t]}function j(e){e.modified||(e.modified=!0,e.parent&&j(e.parent))}function P(e){e.copy||(e.copy=E(e.base))}function E(e){var t=e&&e[i];if(t){t.finalizing=!0;var r=s(t.draft,!0);return t.finalizing=!1,r}return s(e)}function S(e){if(!0===e.revoked)throw new Error("Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? "+JSON.stringify(w(e)))}function A(e){for(var t=e.length-1;t>=0;t--){var r=e[t][i];r.modified||(Array.isArray(r.base)?T(r)&&j(r):x(r)&&j(r))}}function x(e){for(var t=e.base,r=e.draft,n=Object.keys(r),o=n.length-1;o>=0;o--){var a=n[o],u=t[a];if(void 0===u&&!d(t,a))return!0;var c=r[a],f=c&&c[i];if(f?f.base!==u:!h(c,u))return!0}return n.length!==Object.keys(t).length}function T(e){var t=e.draft;if(t.length!==e.base.length)return!0;var r=Object.getOwnPropertyDescriptor(t,t.length-1);return!(!r||r.get)}var _=Object.freeze({willFinalize:function(e,t,r){e.drafts.forEach((function(e){e[i].finalizing=!0})),r?a(t)&&t[i].scope===e&&A(e.drafts):(e.patches&&function e(t){if(!t||"object"!=typeof t)return;var r=t[i];if(!r)return;var n=r.base;var o=r.draft;var a=r.assigned;if(Array.isArray(t)){if(T(r)){if(j(r),a.length=!0,o.length<n.length)for(var u=o.length;u<n.length;u++)a[u]=!1;else for(var c=n.length;c<o.length;c++)a[c]=!0;for(var f=0;f<o.length;f++)void 0===a[f]&&e(o[f])}}else Object.keys(o).forEach((function(t){void 0!==n[t]||d(n,t)?a[t]||e(o[t]):(a[t]=!0,j(r))})),Object.keys(n).forEach((function(e){void 0!==o[e]||d(o,e)||(a[e]=!1,j(r))}))}(e.drafts[0]),A(e.drafts))},createProxy:g});function k(e,t){var r=t?t.scope:y.current,n={scope:r,modified:!1,finalized:!1,assigned:{},parent:t,base:e,draft:null,drafts:{},copy:null,revoke:null},o=Array.isArray(e)?Proxy.revocable([n],D):Proxy.revocable(n,z),i=o.revoke,a=o.proxy;return n.draft=a,n.revoke=i,r.drafts.push(a),a}var z={get:function(e,t){if(t===i)return e;var r=e.drafts;if(!e.modified&&d(r,t))return r[t];var n=R(e)[t];if(e.finalized||!u(n))return n;if(e.modified){if(n!==I(e.base,t))return n;r=e.copy}return r[t]=k(n,e)},has:function(e,t){return t in R(e)},ownKeys:function(e){return Reflect.ownKeys(R(e))},set:function(e,t,r){if(!e.modified){var n=I(e.base,t);if(r?h(n,r)||r===e.drafts[t]:h(n,r)&&t in e.base)return!0;N(e)}return e.assigned[t]=!0,e.copy[t]=r,!0},deleteProperty:function(e,t){(void 0!==I(e.base,t)||t in e.base)&&(e.assigned[t]=!1,N(e));e.copy&&delete e.copy[t];return!0},getOwnPropertyDescriptor:function(e,t){var r=R(e),n=Reflect.getOwnPropertyDescriptor(r,t);n&&(n.writable=!0,n.configurable=!Array.isArray(r)||"length"!==t);return n},defineProperty:function(){throw new Error("Object.defineProperty() cannot be used on an Immer draft")},getPrototypeOf:function(e){return Object.getPrototypeOf(e.base)},setPrototypeOf:function(){throw new Error("Object.setPrototypeOf() cannot be used on an Immer draft")}},D={};function R(e){return e.copy||e.base}function I(e,t){var r=e[i],n=Reflect.getOwnPropertyDescriptor(r?R(r):e,t);return n&&n.value}function N(e){e.modified||(e.modified=!0,e.copy=c(s(e.base),e.drafts),e.drafts=null,e.parent&&N(e.parent))}l(z,(function(e,t){D[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),D.deleteProperty=function(e,t){if(isNaN(parseInt(t)))throw new Error("Immer only supports deleting array indices");return z.deleteProperty.call(this,e[0],t)},D.set=function(e,t,r){if("length"!==t&&isNaN(parseInt(t)))throw new Error("Immer only supports setting array indices and the 'length' property");return z.set.call(this,e[0],t,r)};var C=Object.freeze({willFinalize:function(){},createProxy:k});function F(e,t,r,n){Array.isArray(e.base)?function(e,t,r,n){var o,i,a=e.base,u=e.copy,c=e.assigned;u.length<a.length&&(a=(o=[u,a])[0],u=o[1],r=(i=[n,r])[0],n=i[1]);var f=u.length-a.length,s=0;for(;a[s]===u[s]&&s<a.length;)++s;var l=a.length;for(;l>s&&a[l-1]===u[l+f-1];)--l;for(var p=s;p<l;++p)if(c[p]&&u[p]!==a[p]){var d=t.concat([p]);r.push({op:"replace",path:d,value:u[p]}),n.push({op:"replace",path:d,value:a[p]})}for(var h=l!=a.length,y=r.length,v=l+f-1;v>=l;--v){var b=t.concat([v]);r[y+v-l]={op:"add",path:b,value:u[v]},h&&n.push({op:"remove",path:b})}h||n.push({op:"replace",path:t.concat(["length"]),value:a.length})}(e,t,r,n):function(e,t,r,n){var o=e.base,i=e.copy;l(e.assigned,(function(e,a){var u=o[e],c=i[e],f=a?e in o?"replace":"add":"remove";if(u!==c||"replace"!==f){var s=t.concat(e);r.push("remove"===f?{op:f,path:s}:{op:f,path:s,value:c}),n.push("add"===f?{op:"remove",path:s}:"remove"===f?{op:"add",path:s,value:u}:{op:"replace",path:s,value:u})}}))}(e,t,r,n)}function M(e,t){for(var r=0;r<t.length;r++){var n=t[r],o=n.path;if(0===o.length&&"replace"===n.op)e=n.value;else{for(var i=e,a=0;a<o.length-1;a++)if(!(i=i[o[a]])||"object"!=typeof i)throw new Error("Cannot apply patch, path doesn't resolve: "+o.join("/"));var u=o[o.length-1];switch(n.op){case"replace":i[u]=n.value;break;case"add":Array.isArray(i)?i.splice(u,0,n.value):i[u]=n.value;break;case"remove":Array.isArray(i)?i.splice(u,1):delete i[u];break;default:throw new Error("Unsupported patch operation: "+n.op)}}}return e}var L={useProxies:"undefined"!=typeof Proxy&&"undefined"!=typeof Reflect,autoFreeze:void 0===e&&"verifyMinified"===function(){}.name,onAssign:null,onDelete:null,onCopy:null},U=function(e){c(this,L,e),this.setUseProxies(this.useProxies),this.produce=this.produce.bind(this)};U.prototype.produce=function(e,t,r){var o,i=this;if("function"==typeof e&&"function"!=typeof t){var a=t;return t=e,function(e){void 0===e&&(e=a);for(var r=[],n=arguments.length-1;n-- >0;)r[n]=arguments[n+1];return i.produce(e,(function(e){return t.call.apply(t,[e,e].concat(r))}))}}if("function"!=typeof t)throw new Error("The first or second argument to `produce` must be a function");if(void 0!==r&&"function"!=typeof r)throw new Error("The third argument to `produce` must be a function or undefined");if(u(e)){var c=y.enter(),f=this.createProxy(e),s=!0;try{o=t.call(f,f),s=!1}finally{s?c.revoke():c.leave()}return o instanceof Promise?o.then((function(e){return c.usePatches(r),i.processResult(e,c)}),(function(e){throw c.revoke(),e})):(c.usePatches(r),this.processResult(o,c))}return void 0===(o=t(e))?e:o!==n?o:void 0},U.prototype.createDraft=function(e){if(!u(e))throw new Error("First argument to `createDraft` must be a plain object, an array, or an immerable object");var t=y.enter(),r=this.createProxy(e);return r[i].isManual=!0,t.leave(),r},U.prototype.finishDraft=function(e,t){var r=e&&e[i];if(!r||!r.isManual)throw new Error("First argument to `finishDraft` must be a draft returned by `createDraft`");if(r.finalized)throw new Error("The given draft is already finalized");var n=r.scope;return n.usePatches(t),this.processResult(void 0,n)},U.prototype.setAutoFreeze=function(e){this.autoFreeze=e},U.prototype.setUseProxies=function(e){this.useProxies=e,c(this,e?C:_)},U.prototype.applyPatches=function(e,t){return a(e)?M(e,t):this.produce(e,(function(e){return M(e,t)}))},U.prototype.processResult=function(e,t){var r=t.drafts[0],o=void 0!==e&&e!==r;if(this.willFinalize(t,e,o),o){if(r[i].modified)throw t.revoke(),new Error("An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.");u(e)&&(e=this.finalize(e,null,t)),t.patches&&(t.patches.push({op:"replace",path:[],value:e}),t.inversePatches.push({op:"replace",path:[],value:r[i].base}))}else e=this.finalize(r,[],t);return t.revoke(),t.patches&&t.patchListener(t.patches,t.inversePatches),e!==n?e:void 0},U.prototype.finalize=function(e,t,r){var n=this,o=e[i];if(!o)return Object.isFrozen(e)?e:this.finalizeTree(e,null,r);if(o.scope!==r)return e;if(!o.modified)return o.base;if(!o.finalized){if(o.finalized=!0,this.finalizeTree(o.draft,t,r),this.onDelete)if(this.useProxies){var a=o.assigned;for(var u in a)a[u]||this.onDelete(o,u)}else{var c=o.base,f=o.copy;l(c,(function(e){d(f,e)||n.onDelete(o,e)}))}this.onCopy&&this.onCopy(o),this.autoFreeze&&r.canAutoFreeze&&Object.freeze(o.copy),t&&r.patches&&F(o,t,r.patches,r.inversePatches)}return o.copy},U.prototype.finalizeTree=function(e,t,r){var n=this,o=e[i];o&&(this.useProxies||(o.copy=s(o.draft,!0)),e=o.copy);var c=!!t&&!!r.patches,f=function(i,s,d){if(s===d)throw Error("Immer forbids circular references");var y=!!o&&d===e;if(a(s)){var v=y&&c&&!o.assigned[i]?t.concat(i):null;if(a(s=n.finalize(s,v,r))&&(r.canAutoFreeze=!1),Array.isArray(d)||p(d,i)?d[i]=s:Object.defineProperty(d,i,{value:s}),y&&s===o.base[i])return}else{if(y&&h(s,o.base[i]))return;u(s)&&!Object.isFrozen(s)&&l(s,f)}y&&n.onAssign&&n.onAssign(o,i,s)};return l(e,f),e};var X=new U,K=X.produce;X.setAutoFreeze.bind(X),X.setUseProxies.bind(X),X.applyPatches.bind(X),X.createDraft.bind(X),X.finishDraft.bind(X);t.a=K}).call(this,r(8))},function(e,t,r){"use strict";(function(e,n){var o,i=r(3);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:n;var a=Object(i.a)(o);t.a=a}).call(this,r(6),r(7)(e))},function(e,t,r){"use strict";function n(e){var t,r=e.Symbol;return"function"==typeof r?r.observable?t=r.observable:(t=r("observable"),r.observable=t):t="@@observable",t}r.d(t,"a",(function(){return n}))},function(e,t,r){"use strict";var n=r(0).compose;t.__esModule=!0,t.composeWithDevTools="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"==typeof arguments[0]?n:n.apply(null,arguments)},t.devToolsEnhancer="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION__?window.__REDUX_DEVTOOLS_EXTENSION__:function(){return function(e){return e}}},function(e,t,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var o=r(9);function i(e,t){void 0===e&&(e={});var r={};return Object.keys(e).forEach((function(n){r[n]=t(e[n])})),r}function a(e,t){return void 0===t&&(t={}),Object.keys(t).forEach((function(r){return e[r]=t[r](e)})),e}t.createSelector=o.createSelector;var u=function(e){};t.configureStore=function(e){var t=o.configureStore(n({reducer:e.slices},e));return u=t.dispatch,t},t.createSlice=function(e){var t=i(e.mutations,(function(t){return function(r,n){t(r,n.payload),r=a(r,e.getters)}})),r=o.createSlice({slice:e.name,initialState:a(e.state,e.getters),reducers:t}),n=i(r.actions,(function(e){return function(t){return u(e(t)),e(t)}})),c=i(e.actions,(function(e){return function(t){return e(t)}}));return{slice:r,register:r.reducer,commit:n,action:c}},t.middleware=function(e){return function(){return function(t){return function(r){e(r),t(r)}}}},t.combineSlices=o.combineReducers},function(e,t){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(e){"object"==typeof window&&(r=window)}e.exports=r},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t){var r,n,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function u(e){if(r===setTimeout)return setTimeout(e,0);if((r===i||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:i}catch(e){r=i}try{n="function"==typeof clearTimeout?clearTimeout:a}catch(e){n=a}}();var c,f=[],s=!1,l=-1;function p(){s&&c&&(s=!1,c.length?f=c.concat(f):l=-1,f.length&&d())}function d(){if(!s){var e=u(p);s=!0;for(var t=f.length;t;){for(c=f,f=[];++l<t;)c&&c[l].run();l=-1,t=f.length}c=null,s=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===a||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function y(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];f.push(new h(e,t)),1!==f.length||s||u(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=y,o.addListener=y,o.once=y,o.off=y,o.removeListener=y,o.removeAllListeners=y,o.emit=y,o.prependListener=y,o.prependOnceListener=y,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,r){"use strict";r.r(t);var n=r(0),o=r(1);function i(e,t){return e===t}function a(e,t,r){if(null===t||null===r||t.length!==r.length)return!1;for(var n=t.length,o=0;o<n;o++)if(!e(t[o],r[o]))return!1;return!0}function u(e){var t=Array.isArray(e[0])?e[0]:e;if(!t.every((function(e){return"function"==typeof e}))){var r=t.map((function(e){return typeof e})).join(", ");throw new Error("Selector creators expect all input-selectors to be functions, instead received the following types: ["+r+"]")}return t}var c=function(e){for(var t=arguments.length,r=Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];return function(){for(var t=arguments.length,n=Array(t),o=0;o<t;o++)n[o]=arguments[o];var i=0,a=n.pop(),c=u(n),f=e.apply(void 0,[function(){return i++,a.apply(null,arguments)}].concat(r)),s=e((function(){for(var e=[],t=c.length,r=0;r<t;r++)e.push(c[r].apply(null,arguments));return f.apply(null,e)}));return s.resultFunc=a,s.dependencies=c,s.recomputations=function(){return i},s.resetRecomputations=function(){return i=0},s}}((function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:i,r=null,n=null;return function(){return a(t,r,arguments)||(n=e.apply(null,arguments)),r=arguments,n}}));var f=r(4);function s(e){return function(t){var r=t.dispatch,n=t.getState;return function(t){return function(o){return"function"==typeof o?o(r,n,e):t(o)}}}}var l=s();l.withExtraArgument=s;var p=l;function d(e){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function h(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function y(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=[],n=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(n=(a=u.next()).done)&&(r.push(a.value),!t||r.length!==t);n=!0);}catch(e){o=!0,i=e}finally{try{n||null==u.return||u.return()}finally{if(o)throw i}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function v(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function b(e){if("object"!==d(e)||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function g(e){return null==e||"string"==typeof e||"boolean"==typeof e||"number"==typeof e||Array.isArray(e)||b(e)}r.d(t,"configureStore",(function(){return S})),r.d(t,"createAction",(function(){return A})),r.d(t,"createReducer",(function(){return T})),r.d(t,"createSerializableStateInvariantMiddleware",(function(){return j})),r.d(t,"createSlice",(function(){return k})),r.d(t,"findNonSerializableValue",(function(){return O})),r.d(t,"getDefaultMiddleware",(function(){return P})),r.d(t,"getType",(function(){return x})),r.d(t,"isPlain",(function(){return g})),r.d(t,"combineReducers",(function(){return n.combineReducers})),r.d(t,"compose",(function(){return n.compose})),r.d(t,"createNextState",(function(){return o.a})),r.d(t,"createSelector",(function(){return c}));var m=["A non-serializable value was detected in the state, in the path: `%s`. Value: %o","Take a look at the reducer(s) handling this action type: %s.","(See https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state)"].join("\n"),w=["A non-serializable value was detected in an action, in the path: `%s`. Value: %o","Take a look at the logic that dispatched this action:  %o.","(See https://redux.js.org/faq/actions#why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants)"].join("\n");function O(e){var t,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:g,o=arguments.length>3?arguments[3]:void 0;if(!n(e))return{keyPath:r.join(".")||"<root>",value:e};if("object"!==d(e)||null===e)return!1;var i=null!=o?o(e):Object.entries(e),a=!0,u=!1,c=void 0;try{for(var f,s=i[Symbol.iterator]();!(a=(f=s.next()).done);a=!0){var l=y(f.value,2),p=l[0],h=l[1],v=r.concat(p);if(!n(h))return{keyPath:v.join("."),value:h};if("object"===d(h)&&(t=O(h,v,n,o)))return t}}catch(e){u=!0,c=e}finally{try{a||null==s.return||s.return()}finally{if(u)throw c}}return!1}function j(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.isSerializable,r=void 0===t?g:t,n=e.getEntries,o=e.ignoredActions,i=void 0===o?[]:o;return function(e){return function(t){return function(o){if(i.length&&-1!==i.indexOf(o.type))return t(o);var a=O(o,[],r,n);if(a){var u=a.keyPath,c=a.value;console.error(w,u,c,o)}var f=t(o),s=O(e.getState(),[],r,n);if(s){var l=s.keyPath,p=s.value;console.error(m,l,p,o.type)}return f}}}}function P(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.thunk,r=void 0===t||t,n=(e.immutableCheck,e.serializableCheck,[]);return r&&("boolean"==typeof r?n.push(p):n.push(p.withExtraArgument(r.extraArgument))),n}var E=!0;function S(e){var t,r=e||{},o=r.reducer,i=void 0===o?void 0:o,a=r.middleware,u=void 0===a?P():a,c=r.devTools,s=void 0===c||c,l=r.preloadedState,p=void 0===l?void 0:l,y=r.enhancers,g=void 0===y?void 0:y;if("function"==typeof i)t=i;else{if(!b(i))throw new Error("Reducer argument must be a function or an object of functions that can be passed to combineReducers");t=Object(n.combineReducers)(i)}var m=n.applyMiddleware.apply(void 0,v(u)),w=n.compose;s&&(w=Object(f.composeWithDevTools)(function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter((function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable})))),n.forEach((function(t){h(e,t,r[t])}))}return e}({trace:!E},"object"===d(s)&&s)));var O=[m];Array.isArray(g)?O=[m].concat(v(g)):"function"==typeof g&&(O=g(O));var j=w.apply(void 0,v(O));return Object(n.createStore)(t,p,j)}function A(e,t){function r(){if(t){var r=t.apply(void 0,arguments);if(!r)throw new Error("prepareAction did not return an object");return"meta"in r?{type:e,payload:r.payload,meta:r.meta}:{type:e,payload:r.payload}}return{type:e,payload:arguments.length<=0?void 0:arguments[0]}}return r.toString=function(){return"".concat(e)},r.type=e,r}function x(e){return"".concat(e)}function T(e,t){return function(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:e,n=arguments.length>1?arguments[1]:void 0;return Object(o.a)(r,(function(e){var r=t[n.type];return r?r(e,n):void 0}))}}function _(e,t){return e?"".concat(e,"/").concat(t):t}function k(e){var t=e.slice,r=void 0===t?"":t,n=e.initialState,o=e.reducers||{},i=e.extraReducers||{},a=Object.keys(o),u=T(n,a.reduce((function(e,t){var n=o[t];return e[_(r,t)]="function"==typeof n?n:n.reducer,e}),i)),c=a.reduce((function(e,t){var n=o[t],i=_(r,t);return e[t]="function"==typeof n?A(i):A(i,n.prepare),e}),{});return{slice:r,reducer:u,actions:c}}}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,